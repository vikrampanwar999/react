{"version":3,"sources":["navbar.js","dummy-posts.js","posts.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","react_default","a","createElement","index_es","component","inset","color","variant","posts","title","img","excerpt","Posts","style","marginTop","padding","container","spacing","justify","map","post","item","key","Card_default","CardActionArea_default","CardMedia_default","alt","height","image","CardContent_default","gutterBottom","CardActions_default","Button_default","size","App","AppBar_default","position","varient","navbar","src_posts","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0SA6BeA,MAxBf,SAAgBC,GACZ,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,UAAU,OACZJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUC,UAAU,OAChBJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAcE,OAAK,GACfL,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYG,MAAM,UAAUC,QAAQ,SAApC,SAIRP,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAcE,OAAK,GACfL,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYG,MAAM,UAAUC,QAAQ,SAApC,UAIJP,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAcE,OAAK,GACfL,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYG,MAAM,UAAUC,QAAQ,SAApC,qHCdDC,EANL,CACN,CAACC,MAAM,UAAWC,IAAK,eAAgBC,QAAQ,iBAC/C,CAACF,MAAM,SAAUC,IAAI,KAAMC,QAAQ,gBACnC,CAACF,MAAM,QAASC,IAAI,KAAMC,QAAQ,gBAClC,CAACF,MAAM,YAAaC,IAAI,KAAMC,QAAQ,qBC4C3BC,MAtCf,SAAeb,GACb,OACEC,EAAAC,EAAAC,cAAA,OAAKW,MAAO,CAAEC,UAAW,GAAIC,QAAS,KACpCf,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMa,WAAS,EAACC,QAAS,GAAIC,QAAQ,UAClCV,EAAMW,IAAI,SAAAC,GAAI,OACbpB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMkB,MAAI,EAACC,IAAKF,EAAKX,OACnBT,EAAAC,EAAAC,cAACqB,EAAAtB,EAAD,KACED,EAAAC,EAAAC,cAACsB,EAAAvB,EAAD,KACED,EAAAC,EAAAC,cAACuB,EAAAxB,EAAD,CACEG,UAAU,MACVsB,IAAI,wBACJC,OAAO,MAAKhB,SAAO,EACnBiB,MAAOR,EAAKQ,MACZnB,MAAM,0BAERT,EAAAC,EAAAC,cAAC2B,EAAA5B,EAAD,KACED,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAY2B,cAAY,EAACvB,QAAQ,KAAKH,UAAU,MAC7CgB,EAAKX,OAERT,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYC,UAAU,KAAKgB,EAAKT,WAGpCX,EAAAC,EAAAC,cAAC6B,EAAA9B,EAAD,KACED,EAAAC,EAAAC,cAAC8B,EAAA/B,EAAD,CAAQgC,KAAK,QAAQ3B,MAAM,WAA3B,QAGAN,EAAAC,EAAAC,cAAC8B,EAAA/B,EAAD,CAAQgC,KAAK,QAAQ3B,MAAM,WAA3B,mBCND4B,mLApBX,OACElC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACiC,EAAAlC,EAAD,CAAQK,MAAM,UAAU8B,SAAS,UACjCpC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYkC,QAAQ,QAAQ/B,MAAM,WAAlC,YAGAN,EAAAC,EAAAC,cAACoC,EAAD,OAIFtC,EAAAC,EAAAC,cAACqC,EAAD,eAbUC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.94872405.chunk.js","sourcesContent":["import { List, ListItem, ListItemText, Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\n// import {Home, Book ,AccountBox } from '@material-ui/icons';\r\n\r\n\r\nfunction NavBar(props){\r\n    return (\r\n        <List component=\"nav\">\r\n            <ListItem component=\"div\">\r\n                <ListItemText inset>\r\n                    <Typography color=\"inherit\" variant=\"title\">\r\n                    Home \r\n                    </Typography>\r\n                </ListItemText>\r\n            <ListItemText inset>\r\n                <Typography color=\"inherit\" variant=\"title\">\r\n                Posts \r\n                </Typography>\r\n            </ListItemText>\r\n            <ListItemText inset>\r\n                <Typography color=\"inherit\" variant=\"title\">\r\n                    contact  \r\n                </Typography>\r\n            </ListItemText>            \r\n            </ListItem>\r\n\r\n        </List>\r\n    )\r\n}\r\nexport default NavBar;","var posts=[\r\n    {title:\"newyork\" ,img: \"newyork.jpeg\" ,excerpt:\"this is sweet\"},\r\n    {title:\"taiwan\" ,img:null ,excerpt:\"this is cool\"},\r\n    {title:\"india\" ,img:null ,excerpt:\"this is home\"},\r\n    {title:\"manhattan\" ,img:null ,excerpt:\"this is panorama\"}\r\n];\r\nexport default posts;","import React from \"react\";\r\nimport { Grid, Paper, Typography } from \"@material-ui/core\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport  posts  from \"./dummy-posts\";\r\n\r\nfunction Posts(props) {\r\n  return (\r\n    <div style={{ marginTop: 20, padding: 30 }}>\r\n      <Grid container spacing={40} justify=\"center\">\r\n        {posts.map(post => (\r\n          <Grid item key={post.title}>\r\n            <Card>\r\n              <CardActionArea>\r\n                <CardMedia\r\n                  component=\"img\"\r\n                  alt=\"Contemplative Reptile\"\r\n                  height=\"140\"excerpt\r\n                  image={post.image}\r\n                  title=\"Contemplative Reptile\"\r\n                />\r\n                <CardContent>\r\n                  <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                    {post.title}\r\n                  </Typography>\r\n                  <Typography component=\"p\">{post.excerpt}</Typography>\r\n                </CardContent>\r\n              </CardActionArea>\r\n              <CardActions>\r\n                <Button size=\"small\" color=\"primary\">\r\n                  Like\r\n                </Button>\r\n                <Button size=\"small\" color=\"primary\">\r\n                  Comment\r\n                </Button>\r\n              </CardActions>\r\n            </Card>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Posts;","import React, { Component } from 'react';\n\nimport './App.css';\nimport AppBar from '@material-ui/core/AppBar';\nimport { Toolbar, Typography } from '@material-ui/core';\nimport NavBar from './navbar';\nimport Posts from './posts';\n\nclass App extends Component {\n  render() {\n    return (\n      <div >\n        <AppBar color=\"primary\" position=\"static\">\n        <Toolbar>\n          <Typography varient=\"title\" color=\"inherit\">\n            VIKRAM'S\n          </Typography>\n          <NavBar ></NavBar>\n          \n          \n        </Toolbar>\n        <Posts></Posts>\n        \n        </AppBar>\n       \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}